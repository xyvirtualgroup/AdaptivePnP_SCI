{
    "sourceFile": "ADMM_TV_Warm_Start_save.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1684333443954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1684333443954,
            "name": "Commit-0",
            "content": "\r\n\r\n\r\nimport os\r\nimport time\r\nimport math\r\nimport h5py\r\nimport numpy as np\r\nimport scipy.io as sio\r\nimport matplotlib.pyplot as plt\r\nfrom statistics import mean\r\nimport torch\r\n\r\n\r\nfrom dvp_linear_inv_2_stage_ADMM_tensor_online import admm_denoise_bayer_demosaic_pre as reconstruct # one stage\r\nfrom utilspy import *\r\n\r\n\r\nworker_init_fn(0)\r\ndatasetdir = './dataset/cacti/mid_scale' # color middle scale dataset 512*512 px\r\n\r\nt = time.time()\r\nstr1='New1/'+str(int(t))\r\nresultsdir1 = \"results/\"+str1+'/'  #\r\nmkdir(resultsdir1)\r\nresultsdir = \"results/\"+str1\r\nf = open(resultsdir+'/log.txt','a')\r\n\r\nf.write('cacti midscale bayer: \\n')\r\n\r\n\r\naverage_psnr = []\r\naverage_ssim = []\r\naverage_time = []\r\n\r\nsigma = [0 / 255]  # pre-set noise standard deviation\r\niter_max = [40]  # maximum number of iterations\r\n\r\nfor ncount in range(0,6):\r\n\r\n    average_psnr_i = []\r\n    average_ssim_i = []\r\n    average_time_i = []\r\n    if ncount == 0:\r\n        datname = 'Beauty_bayer'\r\n    elif ncount == 1:\r\n        datname = 'Bosphorus_bayer'\r\n    elif ncount == 2:\r\n        datname = 'Jockey_bayer'\r\n    elif ncount == 3:\r\n        datname = 'Runner_bayer'\r\n    elif ncount == 4:\r\n        datname = 'ShakeNDry_bayer'\r\n    elif ncount == 5:\r\n        datname = 'Traffic_bayer'\r\n\r\n    print('next')\r\n    print('===========BEGIN============'+ datname +'=============BEGIN==============')\r\n\r\n    f.write(datname + ':\\n')\r\n\r\n    matfile = datasetdir + '/' + datname + '.mat' # path of the .mat data file\r\n\r\n\r\n    # In[3]:\r\n\r\n\r\n    # [1] load data\r\n    with h5py.File(matfile, 'r') as file: # for '-v7.3' .mat file (MATLAB)\r\n        # print(list(file.keys()))\r\n        meas_bayer = np.array(file['meas_bayer'])\r\n        mask_bayer = np.array(file['mask_bayer'])\r\n        orig_bayer = np.array(file['orig_bayer'])\r\n        orig_real = np.array(file['orig'])\r\n    #==============================================================================\r\n    # file = scipy.io.loadmat(matfile) # for '-v7.2' and below .mat file (MATLAB)\r\n    # X = list(file[varname])\r\n    #file = sio.loadmat(matfile)\r\n    #meas_bayer = np.array(file['meas'])\r\n    #mask_bayer = np.array(file['mask'])\r\n    #orig_bayer = np.array(file['orig_bayer'])\r\n\r\n    #==============================================================================\r\n\r\n    mask_bayer = np.float32(mask_bayer).transpose((2,1,0))\r\n    if len(meas_bayer.shape) < 3:\r\n        meas_bayer = np.float32(meas_bayer).transpose((1,0))\r\n    else:\r\n        meas_bayer = np.float32(meas_bayer).transpose((2,1,0))\r\n    orig_bayer = np.float32(orig_bayer).transpose((2,1,0))\r\n    # print(mask_bayer.shape, meas_bayer.shape, orig_bayer.shape)\r\n    (nrows, ncols,nmea) = meas_bayer.shape\r\n    (nrows, ncols,nmask) = mask_bayer.shape\r\n\r\n\r\n    v_Admm_tv_gray_bayer = np.zeros([nrows, ncols, nmask*nmea], dtype=np.float32)\r\n    psnr_tv_gray = np.zeros([nmask*nmea,1], dtype=np.float32)\r\n    ssim_tv_gray = np.zeros([nmask*nmea,1], dtype=np.float32)\r\n\r\n\r\n    tv_denoiser = np.zeros([nmea,ncols,nrows,3,nmask], dtype=np.float32)\r\n\r\n    _lambda = 1 # regularization factor\r\n\r\n    denoiser = 'tv'\r\n    noise_estimate = False \r\n\r\n    useGPU = True # use GPU\r\n    if_continue=False\r\n    f.write('tv_denoiser start...\\n')      \r\n\r\n    MAXB = 255.\r\n\r\n    for iframe in range(nmea):\r\n        \r\n        f.write('Measurement Frame {}.\\n'.format(iframe))\r\n        if len(meas_bayer.shape) >= 3:\r\n            meas_bayer_t = np.squeeze(meas_bayer[:,:,iframe])/MAXB\r\n        else:\r\n            meas_bayer_t = meas_bayer/MAXB\r\n        orig_bayer_t = orig_bayer[:,:,iframe*nmask:(iframe+1)*nmask]/MAXB\r\n            \r\n        f.write('tv_denoiser start.\\n')\r\n\r\n        ## [2.2] ADMM-tv_denoiser\r\n        \r\n        begin_time = time.time()\r\n\r\n        \r\n        v_Admm_tv_denoiser_gray_bayer_t,\\\r\n        psnr_Admm_tv_denoiser_gray_t,ssim_Admm_tv_denoiser_gray_t,psnrall_tv_denoiser_gray_t=   \\\r\n            reconstruct(meas_bayer_t, mask_bayer, _lambda,\r\n                                            0.01, 'tv', iter_max, noise_estimate, sigma,x0_bayer=None,\r\n                                            X_orig=orig_bayer_t, model=None,show_iqa=True,\r\n                                            logf = f)                       \r\n                                            \r\n        end_time = time.time()\r\n        t_Admm_tv_denoiser_gray = end_time - begin_time\r\n        print('ADMM-{} PSNR {:2.2f} dB, SSIM {:.4f}, running time {:.1f} seconds.'.format(\r\n            denoiser.upper(), mean(psnr_Admm_tv_denoiser_gray_t), mean(ssim_Admm_tv_denoiser_gray_t), t_Admm_tv_denoiser_gray))\r\n        f.write('ADMM-{} PSNR {:2.2f} dB, SSIM {:.4f}, running time {:.1f} seconds. \\n'.format(\r\n            denoiser.upper(), mean(psnr_Admm_tv_denoiser_gray_t), mean(ssim_Admm_tv_denoiser_gray_t), t_Admm_tv_denoiser_gray))\r\n        v_Admm_tv_gray_bayer[:,:,iframe*nmask:(iframe+1)*nmask] =  v_Admm_tv_denoiser_gray_bayer_t\r\n        psnr_tv_gray[iframe*nmask:(iframe+1)*nmask,:] = np.reshape(psnr_Admm_tv_denoiser_gray_t,(nmask,1))\r\n        ssim_tv_gray[iframe*nmask:(iframe+1)*nmask,:] = np.reshape(ssim_Admm_tv_denoiser_gray_t,(nmask,1))\r\n        # In[12]:\r\n\r\n        \r\n\r\n        average_psnr_i.append(mean(psnr_Admm_tv_denoiser_gray_t))  # mean of 8 frames\r\n        average_ssim_i.append(mean(ssim_Admm_tv_denoiser_gray_t))\r\n        # average_time_i.append(t_Admm_tv_denoiser_color)\r\n\r\n\r\n\r\n        \r\n    print('===========END============'+ datname +'=============END==============')\r\n    sigma_out = [x*255 for x in sigma]\r\n    print(mean(average_psnr_i),end='    ')\r\n    print(mean(average_ssim_i))\r\n\r\n    \r\n    print(iter_max,end=' ')\r\n\r\n    average_psnr.append(mean(average_psnr_i))\r\n    average_ssim.append(mean(average_ssim_i))\r\n    # average_time.append(mean(average_time_i))\r\n\r\n    # In[12]:\r\n    savedmatdir = './results' + '/savedmat/'\r\n    if not os.path.exists(savedmatdir):\r\n        os.makedirs(savedmatdir)\r\n\r\n    sio.savemat('{}_Admm_{}_{}{:d}.mat'.format(savedmatdir,denoiser.lower(),datname,nmask),\r\n                {'v_Admm_tv_denoise':v_Admm_tv_gray_bayer,\r\n                'psnr_Admm_tv_denoise':psnr_tv_gray,\r\n                'ssim_Admm_tv_denoise':ssim_tv_gray,\r\n                })\r\n    print('{}_Admm_{}_{}{:d}.mat -- saved '.format(savedmatdir,denoiser.lower(),datname,nmask))\r\n\r\n\r\nprint('all= ')\r\nprint(mean(average_psnr))\r\nprint(mean(average_ssim))\r\n# print(mean(average_time))\r\nf.close()\r\n            "
        }
    ]
}