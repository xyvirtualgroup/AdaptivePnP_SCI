{
    "sourceFile": "two_stage_ADMM_Online_FastDVD_Warm_fix_grade_ddnplus_dual_16ch_online.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1684333443953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1684333684296,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,11 +175,9 @@\n \r\n     matfile = datasetdir + '/' + datname + '.mat' # path of the .mat data file\r\n \r\n \r\n-    # In[3]:\r\n \r\n-\r\n     # [1] load data\r\n     with h5py.File(matfile, 'r') as file: # for '-v7.3' .mat file (MATLAB)\r\n         # print(list(file.keys()))\r\n         meas_bayer = np.array(file['meas_bayer'])\r\n@@ -324,12 +322,9 @@\n             denoiser.upper(),datname,iframe , mean(psnr_twoStageAdmm_fastdvdnet_gray_t), mean(ssim_twoStageAdmm_fastdvdnet_gray_t), t_twoStageAdmm_fastdvdnet_gray))\r\n         v_twoStageAdmm_fastdvd_gray_bayer[:,:,iframe*nmask:(iframe+1)*nmask] =  v_twoStageAdmm_fastdvdnet_gray_bayer_t\r\n         psnr_fastdvd_gray[iframe*nmask:(iframe+1)*nmask,:] = np.reshape(psnr_twoStageAdmm_fastdvdnet_gray_t,(nmask,1))\r\n         ssim_fastdvd_gray[iframe*nmask:(iframe+1)*nmask,:] = np.reshape(ssim_twoStageAdmm_fastdvdnet_gray_t,(nmask,1))\r\n-        # In[12]:\r\n \r\n-        \r\n-\r\n         average_psnr_i.append(mean(psnr_twoStageAdmm_fastdvdnet_gray_t))  # mean of 8 frames\r\n         average_ssim_i.append(mean(ssim_twoStageAdmm_fastdvdnet_gray_t))\r\n         # average_time_i.append(t_twoStageAdmm_fastdvdnet_color)\r\n \r\n@@ -353,9 +348,8 @@\n     average_psnr.append(mean(average_psnr_i))\r\n     average_ssim.append(mean(average_ssim_i))\r\n     # average_time.append(mean(average_time_i))\r\n \r\n-    # In[12]:\r\n     savedmatdir = resultsdir + '/savedmat/'\r\n     if not os.path.exists(savedmatdir):\r\n         os.makedirs(savedmatdir)\r\n \r\n"
                },
                {
                    "date": 1684333789261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n average_time = []\r\n \r\n \r\n fix = False\r\n-for ncount in range(1,2):\r\n+for ncount in range(6):\r\n \r\n     average_psnr_i = []\r\n     average_ssim_i = []\r\n     average_time_i = []\r\n"
                }
            ],
            "date": 1684333443953,
            "name": "Commit-0",
            "content": "\r\n\r\nimport os\r\n\r\nroot_path = os.path.dirname(os.path.abspath(__file__))\r\nprint(root_path)\r\nos.chdir( root_path )\r\nimport time\r\nimport math\r\nimport h5py\r\nimport numpy as np\r\nimport scipy.io as sio\r\nimport matplotlib.pyplot as plt\r\nfrom statistics import mean\r\nimport torch\r\n\r\nfrom dvp_linear_inv_2_stage_ADMM_tensor_online import twoStageAdmm_denoise_bayer as reconstruct,np2tch_cuda\r\nfrom utilspy import *\r\nfrom packages.fastdvdnet.models import FastDVDnet\r\n\r\nos.environ[\"CUDA_VISIBLE_DEVICES\"] = \"0,9\"\r\n\r\nworker_init_fn(0)\r\n\r\n\r\ndatasetdir = './dataset/cacti/mid_scale' # color middle scale dataset 512*512 px\r\nupdate = True # use 'online' denoiser\r\nreuse_model = True # use refined model for later frames\r\ndenoiser = 'fastdvd_color' # video denosing network\r\n\r\ndeep_demosaicking = True\r\n# demosaic_update = False\r\n\r\n# pre-load the model for fastdvdnet image denoising\r\nNUM_IN_FR_EXT = 5 # temporal size of patch\r\n    #sf = 1                    # unused for denoising\r\n\r\nmodel_denoise_path ='./packages/fastdvdnet/model.pth'\r\n\r\n\r\nfrom models.network_demosaicking_dual_path0913 import DDnet\r\nmodel_demosaic_path = '/home/wuzongliang/py/Two-stage-online-PnP/DDN_plus0905/DDn_plus_baseline_0913_32/joint_logs/ckpt_old.pth'\r\n\r\n\r\nt = time.time()\r\nstr1='New1/'+str(int(t))\r\nresultsdir1 = \"results/\"+str1+'/'  #\r\nmkdir(resultsdir1)\r\nresultsdir = \"results/\"+str1\r\nf = open(resultsdir+'/log.txt','a')\r\n\r\nf.write('cacti midscale bayer: \\n')\r\n\r\n\r\naverage_psnr = []\r\naverage_ssim = []\r\naverage_time = []\r\n\r\n\r\nfix = False\r\nfor ncount in range(1,2):\r\n\r\n    average_psnr_i = []\r\n    average_ssim_i = []\r\n    average_time_i = []\r\n    if ncount == 0:\r\n        datname = 'Beauty_bayer'\r\n        sigma = [8/255]  # pre-set noise standard deviation\r\n        iter_max = [18]  # maximum number of iterations\r\n        \r\n\r\n        lr = 2e-6 # 2e-7\r\n        update_per_iter = 2 # best 2 for ddn         # 1  \r\n        interval_iter = 9 # best 9 for ddn       \r\n        update_times = 1 # -1: default=iter_max/interval_iter, 1: only once, ...\r\n\r\n        if deep_demosaicking:\r\n            sigma = [12/255,6/255]\r\n            iter_max = [21,2]  \r\n            # sigma = [12/255]\r\n            # iter_max = [20]  \r\n\r\n            interval_iter = 22\r\n            \r\n \r\n            \r\n    elif ncount == 1:\r\n        datname = 'Bosphorus_bayer'\r\n        sigma = [12/255,6/255]    #    pre-set noise standard deviation\r\n        iter_max = [24,12]  # maximum number of iterations\\\r\n\r\n\r\n        lr = 2e-7\r\n        update_per_iter = 2                  \r\n        interval_iter = 12 \r\n        update_times = -1\r\n        if deep_demosaicking:\r\n            sigma = [8/255,6/255]  \r\n            iter_max = [24,12]    \r\n            interval_iter = 25\r\n                \r\n\r\n    elif ncount == 2:\r\n        datname = 'Jockey_bayer'\r\n        sigma = [12/255]  #    pre-set noise standard deviation\r\n        iter_max = [24]  # maximum number of iterations\r\n\r\n        lr = 2e-7\r\n        update_per_iter = 2                 \r\n        interval_iter = 12\r\n        update_times = -1\r\n        if deep_demosaicking:\r\n            sigma = [12/255,6/255]  \r\n            iter_max = [24,6]  \r\n            interval_iter = 25\r\n                         \r\n\r\n\r\n    elif ncount == 3:\r\n        datname = 'Runner_bayer'\r\n        sigma = [14/255]  #    pre-set noise standard deviation\r\n        iter_max = [24]  # maximum number of iterations\r\n\r\n        lr = 2e-7\r\n        update_per_iter = 2                  \r\n        interval_iter = 12\r\n        update_times = -1 \r\n        if deep_demosaicking:\r\n            sigma = [12/255,6/255]  \r\n            iter_max = [40,15]  \r\n\r\n            interval_iter = 41\r\n            \r\n        \r\n\r\n\r\n    elif ncount == 4:\r\n        datname = 'ShakeNDry_bayer'\r\n        sigma = [10/255]  #    pre-set noise standard deviation\r\n        iter_max = [15]  # maximum number of iterations\r\n\r\n        lr = 2e-7\r\n        update_per_iter = 1                 \r\n        interval_iter = 7\r\n        update_times = -1        \r\n        if deep_demosaicking:\r\n            sigma = [12/255,6/255]  \r\n            iter_max = [14,4]  \r\n            interval_iter = 15\r\n            \r\n\r\n    elif ncount == 5:\r\n        datname = 'Traffic_bayer'\r\n        sigma = [30/255]  #    pre-set noise standard deviation\r\n        iter_max = [22]  # maximum number of iterations\r\n\r\n        lr = 2e-7\r\n        update_per_iter = 2                  \r\n        interval_iter = 11 \r\n        update_times = -1  \r\n\r\n        if deep_demosaicking:\r\n            sigma = [25/255,12/255,6/255]  \r\n            iter_max = [36,6,2]  \r\n            interval_iter = 43\r\n            \r\n\r\n                \r\n    # iter_max[1] = iter_max[1]+8\r\n        \r\n    print('next')\r\n    print('===========BEGIN============'+ datname +'=============BEGIN==============')\r\n    \r\n    f.write(datname + ':\\n')\r\n\r\n    matfile = datasetdir + '/' + datname + '.mat' # path of the .mat data file\r\n\r\n\r\n    # In[3]:\r\n\r\n\r\n    # [1] load data\r\n    with h5py.File(matfile, 'r') as file: # for '-v7.3' .mat file (MATLAB)\r\n        # print(list(file.keys()))\r\n        meas_bayer = np.array(file['meas_bayer'])\r\n        mask_bayer = np.array(file['mask_bayer'])\r\n        orig_bayer = np.array(file['orig_bayer'])\r\n        orig_real = np.array(file['orig'])\r\n    \r\n    warm_start_file = './results/savedmat/_Admm_tv_'+datname+'8.mat'\r\n\r\n\r\n    file = sio.loadmat(warm_start_file) # for '-v7.3' .mat file (MATLAB)\r\n        # print(list(file.keys()))\r\n    recon_tv = np.array(file['v_Admm_tv_denoise'])\r\n\r\n    #==============================================================================\r\n    # file = scipy.io.loadmat(matfile) # for '-v7.2' and below .mat file (MATLAB)\r\n    # X = list(file[varname])\r\n    #file = sio.loadmat(matfile)\r\n    #meas_bayer = np.array(file['meas'])\r\n    #mask_bayer = np.array(file['mask'])\r\n    #orig_bayer = np.array(file['orig_bayer'])\r\n\r\n    #==============================================================================\r\n\r\n    mask_bayer = np.float32(mask_bayer).transpose((2,1,0))\r\n    if len(meas_bayer.shape) < 3:\r\n        meas_bayer = np.float32(meas_bayer).transpose((1,0))\r\n    else:\r\n        meas_bayer = np.float32(meas_bayer).transpose((2,1,0))\r\n    orig_bayer = np.float32(orig_bayer).transpose((2,1,0))\r\n    # print(mask_bayer.shape, meas_bayer.shape, orig_bayer.shape)\r\n    (nrows, ncols,nmea) = meas_bayer.shape\r\n    (nrows, ncols,nmask) = mask_bayer.shape\r\n\r\n\r\n    v_twoStageAdmm_fastdvd_gray_bayer = np.zeros([nrows, ncols, nmask*nmea], dtype=np.float32)\r\n    psnr_fastdvd_gray = np.zeros([nmask*nmea,1], dtype=np.float32)\r\n    ssim_fastdvd_gray = np.zeros([nmask*nmea,1], dtype=np.float32)\r\n\r\n\r\n    onlinefastdvdnet = np.zeros([nmea,ncols,nrows,3,nmask], dtype=np.float32)\r\n\r\n    _lambda = 1 # regularization factor\r\n    accelerate = True # enable accelerated version of _twoStageAdmm_\r\n    \r\n    noise_estimate = False # disable noise estimation for _twoStageAdmm_\r\n\r\n\r\n    useGPU = True # use GPU\r\n\r\n\r\n    \r\n        \r\n    model_denoise = FastDVDnet(num_input_frames=NUM_IN_FR_EXT)\r\n\r\n    # Load saved weights\r\n    state_temp_dict = torch.load(model_denoise_path)\r\n\r\n    if useGPU:\r\n        device_ids = [0,1]\r\n        model_denoise = torch.nn.DataParallel(model_denoise, device_ids=device_ids).cuda()\r\n        # model = model.cuda()\r\n    # else:\r\n        # CPU mode: remove the DataParallel wrapper\r\n        # state_temp_dict = remove_dataparallel_wrapper(state_temp_dict)\r\n\r\n        model_denoise.load_state_dict(state_temp_dict)\r\n\r\n\r\n    \r\n    \r\n\r\n    model_denoise.eval()\r\n\r\n    if deep_demosaicking:\r\n        # from torch import nn\r\n        model_demosaic = DDnet()\r\n        model_demosaic = torch.nn.DataParallel(model_demosaic).cuda()\r\n        state_dict = torch.load(model_demosaic_path)['state_dict']\r\n        model_demosaic.load_state_dict(state_dict, strict=True)\r\n        model_demosaic.eval()\r\n    else: \r\n        model_demosaic=None\r\n\r\n    MAXB = 255.\r\n\r\n    for iframe in range(nmea):\r\n        \r\n        f.write('Measurement Frame {}.\\n'.format(iframe))\r\n        if len(meas_bayer.shape) >= 3:\r\n            meas_bayer_t = np.squeeze(meas_bayer[:,:,iframe])/MAXB\r\n        else:\r\n            meas_bayer_t = meas_bayer/MAXB\r\n        orig_bayer_t = orig_bayer[:,:,iframe*nmask:(iframe+1)*nmask]/MAXB\r\n        \r\n        \r\n\r\n        f.write('fastdvdnet-rgb-demosaic start.\\n')\r\n\r\n        ## [2.2] ADMM-fastdvdnet\r\n        \r\n        begin_time = time.time()\r\n\r\n\r\n        v_tv = recon_tv[:,:,iframe*nmask:(iframe+1)*nmask]\r\n        # v_tv,_,_,_ =   \\\r\n        #     reconstruct(meas_bayer_t, mask_bayer, _lambda,\r\n        #                                   0.01, 'tv', 40, noise_estimate, 0,x0_bayer=None,\r\n        #                                   X_orig=orig_bayer_t, \r\n        #                                   model_denoise=None,model_demosaic=None,\r\n        #                                   show_iqa=True,demosaic_method ='malvar2004',\r\n        #                                   lr_=lr,\r\n        #                                   interval_iter=interval_iter,logf = f,update_=update,update_per_iter=update_per_iter)   \r\n\r\n        onlinefastdvdnet[iframe,:,:,:,:],v_twoStageAdmm_fastdvdnet_gray_bayer_t,\\\r\n            psnr_twoStageAdmm_fastdvdnet_gray_t,ssim_twoStageAdmm_fastdvdnet_gray_t,psnrall_fastdvdnet_gray_t,refined_model,dm_refined_model =   \\\r\n            reconstruct(meas_bayer_t, mask_bayer, _lambda,\r\n                                            0.01, denoiser, iter_max, noise_estimate, sigma,x0_bayer= np2tch_cuda( v_tv),\r\n                                            X_orig=orig_bayer_t, \r\n                                            model_denoise=model_denoise,\r\n                                            model_demosaic=model_demosaic,\r\n                                            show_iqa=True,demosaic_method ='malvar2004',\r\n                                            lr_=lr,\r\n                                            interval_iter=interval_iter,logf = f,update_=update,update_per_iter=update_per_iter,update_times=update_times)   \r\n        if reuse_model and update:\r\n            model_denoise = refined_model\r\n            model_demosaic = dm_refined_model\r\n        else: \r\n            model_denoise.load_state_dict(torch.load(model_denoise_path), strict=True)\r\n            model_denoise.eval()\r\n            model_denoise = model_denoise.cuda()    \r\n\r\n            model_demosaic.load_state_dict(torch.load(model_demosaic_path)['state_dict'], strict=True)\r\n            model_demosaic.eval()\r\n            model_demosaic = model_demosaic.cuda()            \r\n                                            \r\n        end_time = time.time()\r\n        t_twoStageAdmm_fastdvdnet_gray = end_time - begin_time\r\n        print('ADMM-{}--{}-{} PSNR {:2.2f} dB, SSIM {:.4f}, running time {:.1f} seconds.'.format(\r\n            denoiser.upper(),datname,iframe ,mean(psnr_twoStageAdmm_fastdvdnet_gray_t), mean(ssim_twoStageAdmm_fastdvdnet_gray_t), t_twoStageAdmm_fastdvdnet_gray))\r\n        f.write('ADMM-{}--{}-{} PSNR {:2.2f} dB, SSIM {:.4f}, running time {:.1f} seconds. \\n'.format(\r\n            denoiser.upper(),datname,iframe , mean(psnr_twoStageAdmm_fastdvdnet_gray_t), mean(ssim_twoStageAdmm_fastdvdnet_gray_t), t_twoStageAdmm_fastdvdnet_gray))\r\n        v_twoStageAdmm_fastdvd_gray_bayer[:,:,iframe*nmask:(iframe+1)*nmask] =  v_twoStageAdmm_fastdvdnet_gray_bayer_t\r\n        psnr_fastdvd_gray[iframe*nmask:(iframe+1)*nmask,:] = np.reshape(psnr_twoStageAdmm_fastdvdnet_gray_t,(nmask,1))\r\n        ssim_fastdvd_gray[iframe*nmask:(iframe+1)*nmask,:] = np.reshape(ssim_twoStageAdmm_fastdvdnet_gray_t,(nmask,1))\r\n        # In[12]:\r\n\r\n        \r\n\r\n        average_psnr_i.append(mean(psnr_twoStageAdmm_fastdvdnet_gray_t))  # mean of 8 frames\r\n        average_ssim_i.append(mean(ssim_twoStageAdmm_fastdvdnet_gray_t))\r\n        # average_time_i.append(t_twoStageAdmm_fastdvdnet_color)\r\n\r\n\r\n    print('===========END============'+ datname +'=============END==============')\r\n    sigma_out = [x*255 for x in sigma]\r\n    print(round(mean(average_psnr_i),2),end=', ')\r\n    print(round(mean(average_ssim_i),4))\r\n    print('Params:')\r\n    print(lr,end=' ')\r\n\r\n    print(iter_max,end=' ')\r\n    print(sigma_out,end=' ')\r\n\r\n    print('interval_iter='+str(interval_iter),end=' ')\r\n    # print('inital_iter='+str(inital_iter),end=' ')\r\n    print('update_per_iter='+str(update_per_iter))\r\n\r\n    \r\n\r\n    average_psnr.append(mean(average_psnr_i))\r\n    average_ssim.append(mean(average_ssim_i))\r\n    # average_time.append(mean(average_time_i))\r\n\r\n    # In[12]:\r\n    savedmatdir = resultsdir + '/savedmat/'\r\n    if not os.path.exists(savedmatdir):\r\n        os.makedirs(savedmatdir)\r\n\r\n    sio.savemat('{}twoStageAdmm_{}_{}{:d}_sigma{:d}_all7_log.mat'.format(savedmatdir,denoiser.lower(),datname,nmask,int(sigma[-1]*MAXB)),\r\n                {\r\n                    'v_twoStageAdmm_fastdvd_gray_bayer':v_twoStageAdmm_fastdvd_gray_bayer,\r\n                    'psnr_fastdvd_gray':psnr_fastdvd_gray,\r\n                    'ssim_fastdvd_gray':ssim_fastdvd_gray,\r\n                    # 'v_twoStageAdmm_fastdvd_color':onlinefastdvdnet,\r\n\r\n                    'orig_real':orig_real,\r\n                    'meas_bayer':meas_bayer\r\n                    })\r\nprint('all= ')\r\nprint(round(mean(average_psnr),2),end=', ')\r\nprint(round(mean(average_ssim),4))\r\n# print(mean(average_time))\r\nf.close()\r\n"
        }
    ]
}